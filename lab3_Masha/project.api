# control.h task.h
!control.cpp control.h graphics.h keys_n_colors.h #<#>
!main.cpp cctype cerrno clocale control.h cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error task.h type_traits typeinfo wchar.h wctype.h #<#>
!task.cpp cctype cerrno clocale control.h cstdint cstdio cstdlib ctype.h cwchar errno.h exception graphics.h initializer_list iosfwd keys_n_colors.h limits limits.h locale.h math.h new signal.h stddef.h stdint.h stdio.h stdlib.h string string_view task.h type_traits typeinfo wchar.h #<#>
 struct@Control _type_ #<control.h>
HEIGHT #<control.h>
M_PI #<task.cpp>
WIDTH #<control.h>
canvas(int n) -> void #<control.cpp>
canvas(int) -> void #<control.h>
control_values : enum #<control.h>
controls : Control[] #<control.cpp>
create_background(const char* image_name) -> void #<control.cpp>
create_background(const char*) -> void #<control.h>
create_control_maxi(int n, int x0, int y0) -> void #<control.cpp>
create_control_maxi(int, int, int) -> void #<control.h>
create_control_mini(int n, int x0, int y0) -> void #<control.cpp>
create_control_mini(int, int, int) -> void #<control.h>
create_line(int x1, int y1) -> void #<task.cpp>
draw_star(int x0, int y0, int R, int n) -> void #<task.cpp>
draw_star(int, int, int, int) -> void #<task.h>
main() -> int #<main.cpp>
save() -> void #<task.h>
select_control() -> int #<control.h>
show_number(int n, int choose) -> void #<task.cpp>
show_number(int, int) -> void #<task.h>
	Control::x0 : int #<control.h>
	Control::y0 : int #<control.h>
	Control::x1 : int #<control.h>
	Control::y1 : int #<control.h>
